decl call

defun getf
	dup meta
	dup
	<(VALUE){.type = OBJECT_TYPE, .data.obj = (OBJECT_BASE*)vm->default_meta}>
    eq
    
	if
		drop
		dgetf
	else
		' index
		swap
		recur
		call
	endif
end

defun call
	dup
	<(VALUE){.type = FUNC_TYPE, .data.obj = (OBJECT_BASE*)pcall_func}>
    eq
    
	if
		pcall
	else
		dup meta
		' call
		swap
		getf
		recur
	endif
end

defun run
	call
	exit
end

defmacro compile
	dup type
	' number eq
	if
		compile_literal
	else
		get
		dup macro_qm
		not
		if
			compile_call
		else
			call
		endif
	endif
end

defmacro defun
	program_read
	begin_compilation
	
	label
	program_read
	dup ' end eq
	if
		drop
	else
		compile
		jump
		resolve_to_label -1
	endif
	
	drop_labels 1
	end_compilation
end