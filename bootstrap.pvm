decl call

defun getf
	dup meta
	dup
	<(VALUE){.type = OBJECT_TYPE, .data.obj = (OBJECT_BASE*)vm->default_meta}>
    eq
    
	if
		drop
		dgetf
	else
		' index
		swap
		recur
		call
	endif
end

defun call
	dup
	<(VALUE){.type = FUNC_TYPE, .data.obj = (OBJECT_BASE*)pcall_func}>
    eq
    
	if
		pcall
	else
		dup meta
		' call
		swap
		getf
		recur
	endif
end

defun run
	call
	exit
end

defmacro compile
	dup type
	' number eq
	if
		compile_literal
	else
		dup get macro_qm
		not
		if
			compile_call
		else
			get
			call
		endif
	endif
end

defmacro defun
	program_read
	begin_compilation
	
	while
	  program_read
	  dup ' end eq not
	do
		compile
	repeat
	
	drop
	' leave compile
	
	end_compilation
end

defun setf
   dup meta
   ' setf
   swap
   getf
   call
end

defun eval
  while eol_qm not do
		program_read dup type ' symbol eq
		if get call endif
  repeat
end