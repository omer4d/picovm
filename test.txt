defun # >> >> compile-call >> compile-call compile-call end

>> # get setmac

defun peek # >> dup # << end

>> peek get setmac

defun defmacro # peek # defun get setmac end

>> defmacro get setmac

defmacro ' # >> # compile-literal end

defmacro call! call end

defmacro ! # >> get # call! end

defmacro ## # >> # compile-literal ' compile # compile-call end

defmacro if
	## not
	# ?jump
	
	label:
	# >> dup ' endif =
	?jump
		# compile
	! swap
	jump to-label
	resolve:
	drop
	
	
	# resolve:
end



defun test
	label:
	not
	?jump
	! swap
	jump to-label
	resolve:
end