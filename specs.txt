Operations are described in terms of their effects on the logical _VM state_, which consists of the following:
- current continuation
- argument stack
- global scope
- input stream position
- read buffer
- compiler state

- All compiler calls must happen within a _compilation context_ with which the results will be associated.
- Relative order is defined only between compilation results within the same context, and matches the compiler call sequence.
- A new compilation context may be opened at any time and must be explicitly closed upon completion.
- Compilation results are automatically associated with the last open compilation context (the Active Context).
- If a new context is opened while an active context exists, the current active context is stashed and the new context becomes active.
- When the current context is closed, the last stashed context is automatically restored as current.
If no stashed context exists, the compiler remains in a state with no active context.
(?) Minimum stash number?
(?) What happens when maximum stash number is exceeded?

Execution Contexts:
Compiled instructions may be executed in two kinds of context: interactive or non-interactive.
- In interactive mode, execution may be temporarily interrupted and then resumed.
Uses for this feature include debugging and manual error resolution.
- In non-interactive mode, execution continues until program end is reached or an error occurs.

Note that the VM may have both an active execution context and an active compilation context at the same time.
This is the case during compilation, for instance, since compiler functions, macros and normal functions
may all be executed as part of the process. 

Runtime vs. Compile-Time Errors:
-Any error generated while an active compilation context exists is a compile-time error.
This includes errors generated by normal functions, even if no calls to compiler functions have been made.
   
-All other errors are runtime errors

Handling of Runtime Errors
--------------------------
In an interactive context:
A copy of the current continuation is stashed. The current continuation is then nullified. 
VM state remains the same otherwise.
New code may then be executed in a non-interactive context.
Interactive execution may continue when the stashed continuation is either called or discarded.


In a non-interactive context:
The current continuation is nullified. VM state remains the same otherwise.
Execution may be restarted in any desired execution context.

Handling of Compile-Time Errors
-------------------------------
The current continuation is nullified.
The compiler state is reset.
The read buffer is cleared.
Execution may be restarted in any desired execution context.